{"version":3,"file":"fjl-input-filter.js","sources":["../../src/Utils.js","../../src/Input.js","../../src/InputFilter.js","../../src/fjlInputFilter.js"],"sourcesContent":["/**\r\n * Same as `console.error`.  Used by *IO variant methods (methods that work with promises) in fjlInputFilter;\r\n * E.g., used as the error catcher on promises returned from IO processes.\r\n * @function module:fjlInputFilter.defaultErrorHandler\r\n * @returns {void}\r\n */\r\nexport const defaultErrorHandler = console.error.bind(console);\r\n","/**\r\n * Created by Ely on 7/24/2014.\r\n */\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\nimport {assign, apply, compose, concat, isString, isArray, isset} from 'fjl';\r\nimport {toValidationResult, toValidationOptions, notEmptyValidator} from 'fjl-validator';\r\nimport {defaultErrorHandler} from './Utils';\r\n\r\n/*---------------------------------------------------*/\r\n/* VIRTUAL TYPES AND INTERFACES */\r\n/*---------------------------------------------------*/\r\n/**\r\n * @interface InputValidationResult\r\n * @memberOf fjlInputFilter\r\n * @property {String} name - `Input` this result was generated with.\r\n * @property {Boolean} result - Result of validation.\r\n * @property {Array} messages - Any error messages if `result` is `false`.\r\n * @property {*} value=null - Value tested against (if `filters` exist on given `#Input` object the `value` is what is returned from the results of running filters on value).\r\n * @property {*} rawValue=null - Raw value tested against.\r\n * @property {*} obscuredValue=null - Obscured value if validation `result` is `true`.\r\n * @property {*} filteredValue=null - Filtered result if validation `result` is `true`.\r\n */\r\n\r\n/**\r\n * @interface InputOptions\r\n * @memberOf fjlInputFilter\r\n * @desc Contains rules for validating and/or filtering an input.\r\n * @property {String} name='' - Input's name.\r\n * @property {Boolean} required=false - Whether input is required or not.\r\n * @property {Array} filters=[] - Any filter functions to apply to value.\r\n * @property {Array} validators=[] - Any validators to validate against for given value (to validator).\r\n * @property {Boolean} breakOnFailure=false - Whether or not to 'break' on a validation failure result or not.\r\n * @property {Boolean} valueObscured=false - Whether to obscure the value being tested against (to the assigned places) or not).\r\n * @property {Function} valueObscurator=((x) => x) - Obscurator used for obscuring a value given to validation.\r\n */\r\n\r\nexport const\r\n\r\n    noValidationRequired = (input, value) =>\r\n        !input.required && (\r\n            !isset(value) || (\r\n                (isString(value) || isArray(value)) &&\r\n                !value.length\r\n            )\r\n        ),\r\n\r\n    /**\r\n     * Validates an input object based.\r\n     * @function module:fjlInputFilter.validateInput\r\n     * @param input {Input|InputOptions}\r\n     * @param value {*}\r\n     * @returns {InputValidationResult}\r\n     */\r\n    validateInput = (input, value) => {\r\n        const {validators, filters, breakOnFailure,\r\n                valueObscured, valueObscurator, name} = input;\r\n\r\n        // If value is not required and is `null` or `undefined`\r\n        if (noValidationRequired(input, value)) {\r\n            return toInputValidationResult({\r\n                result: true,\r\n                name: name || '',\r\n                rawValue: value,\r\n                value,\r\n                filteredValue: value,\r\n                obscuredValue: value\r\n            });\r\n        }\r\n\r\n        // Run validation and filtering\r\n        let vResult = runValidators(validators, breakOnFailure, value),\r\n            fResult = runFilters(filters, value),\r\n            oResult = valueObscured && valueObscurator ? valueObscurator(fResult) : fResult;\r\n\r\n        return toInputValidationResult(assign(vResult, {\r\n            name: name || '',\r\n            rawValue: value,\r\n            value: fResult,\r\n            filteredValue: fResult,\r\n            obscuredValue: oResult\r\n        }));\r\n    },\r\n\r\n    /**\r\n     * Validates an input object that may have IOValidators.  Returns\r\n     * a validation result wrapped in a promise.\r\n     * @function module:fjlInputFilter.validateIOInput\r\n     * @param input {Input|InputOptions}\r\n     * @param value {*}\r\n     * @returns {Promise.<InputValidationResult>}\r\n     */\r\n    validateIOInput = (input, value) => {\r\n        const {validators, filters, breakOnFailure,\r\n                valueObscured, valueObscurator} = input;\r\n\r\n        // If not required and value is `null` or `undefined` return truthy result\r\n        if (noValidationRequired(input, value)) {\r\n            return Promise.resolve(\r\n                toInputValidationResult({\r\n                    result: true,\r\n                    name: input.name || '',\r\n                    rawValue: value,\r\n                    value,\r\n                    filteredValue: value,\r\n                    obscuredValue: value\r\n                })\r\n            );\r\n        }\r\n\r\n        let pendingValidation = validators && validators.length ?\r\n            runIOValidators(validators, breakOnFailure, value, input) :\r\n            Promise.resolve({result: true})\r\n        ;\r\n\r\n        return pendingValidation.then(result =>\r\n            runIOFilters(filters, value)\r\n                .then(filteredValue => {\r\n                    result.rawValue = value;\r\n                    result.value = result.filteredValue = filteredValue;\r\n                    result.obscuredValue =\r\n                        valueObscured && valueObscurator ?\r\n                            valueObscurator(filteredValue) : filteredValue;\r\n                    return toInputValidationResult(result);\r\n                })\r\n            );\r\n    },\r\n\r\n    /**\r\n     * Runs validator against given `value`.\r\n     * @function module:fjlInputFilter.runValidators\r\n     * @param validators {Array.<Function>}\r\n     * @param breakOnFailure {Boolean}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    runValidators = (validators, breakOnFailure, value) => {\r\n        let result = true,\r\n            i = 0,\r\n            messageResults = [];\r\n        if (!validators || !validators.length) {\r\n            return toValidationResult({result});\r\n        }\r\n        const limit = validators.length;\r\n        for (; i < limit; i++) {\r\n            const vResult = validators[i](value);\r\n            if (!vResult.result) {\r\n                messageResults.push(vResult.messages);\r\n                result = false;\r\n                if (breakOnFailure) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return toValidationResult({result, messages: concat(messageResults)});\r\n    },\r\n\r\n    /**\r\n     * Runs (possibly) IOValidators against given `value`.\r\n     * @function module:fjlInputFilter.runIOValidators\r\n     * @param validators {Array.<Function>}\r\n     * @param breakOnFailure {Boolean}\r\n     * @param value {*}\r\n     * @param [errorCallback=console.error] {Function}\r\n     * @returns {*}\r\n     */\r\n    runIOValidators = (validators, breakOnFailure, value, errorCallback = defaultErrorHandler) => {\r\n        if (!validators || !validators.length) {\r\n            return Promise.resolve(toValidationResult({result: true}));\r\n        }\r\n        const limit = validators.length,\r\n            pendingResults = [];\r\n        let i = 0,\r\n            result = true;\r\n        for (; i < limit; i++) {\r\n            const validator = validators[i],\r\n                vResult = validator(value);\r\n            if (vResult instanceof Promise) {\r\n                pendingResults.push(vResult.catch(errorCallback));\r\n                continue;\r\n            }\r\n            pendingResults.push(vResult);\r\n            if (!vResult.result) {\r\n                result = false;\r\n                if (breakOnFailure) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return Promise.all(pendingResults)\r\n            .then(results => {\r\n                const failedResults = results.filter(rslt => !rslt.result),\r\n                    interimResult = {\r\n                        result,\r\n                        messages: failedResults.reduce((agg, item) =>\r\n                            agg.concat(item.messages), [])\r\n                    };\r\n                if (failedResults.length) {\r\n                    interimResult.result = false;\r\n                }\r\n                return toValidationResult(interimResult);\r\n            })\r\n            .catch(errorCallback);\r\n    },\r\n\r\n    /**\r\n     * Runs filters on value (successively).\r\n     * @function module:fjlInputFilter.runFilters\r\n     * @param filters {Array.<Function>}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    runFilters = (filters, value) => filters && filters.length ?\r\n        apply(compose, filters)(value) : value,\r\n\r\n    /**\r\n     * Runs filters on value (successively) and returns result wrapped in a promise.\r\n     * @function module:fjlInputFilter.runIOFilters\r\n     * @param filters {Array.<Function>}\r\n     * @param value {*}\r\n     * @param [errorCallback=console.error] {Function}\r\n     * @returns {Promise.<*>}\r\n     */\r\n    runIOFilters = (filters, value, errorCallback = defaultErrorHandler) =>\r\n        runFilters(filters ? filters.map(filter => x => x.then(filter)) : null,\r\n            Promise.resolve(value).catch(errorCallback)),\r\n\r\n    /**\r\n     * Returns an `InputOptions` object from given object and optionally turns the `out` object into\r\n     * said `InputOptions` with firstParam assigned on top of it.\r\n     * @function module:fjlInputFilter.toInput\r\n     * @param inputObj {Object|*} - Object to build `InputOptions` object from.\r\n     * @param [out = {}] {Object|*}\r\n     * @returns {InputOptions}\r\n     */\r\n    toInput = (inputObj, out = {}) => {\r\n        const _inputObj = defineEnumProps$([\r\n            [String,    'name', ''],\r\n            [Boolean,   'required', false],\r\n            [Array,     'filters', []],\r\n            [Array,     'validators', []],\r\n            [Boolean,   'breakOnFailure', false]\r\n        ], toValidationOptions(out));\r\n        if (isString(inputObj)) {\r\n            _inputObj.name = inputObj;\r\n        }\r\n        else if (inputObj) {\r\n            assign(_inputObj, inputObj);\r\n        }\r\n        if (_inputObj.required) {\r\n            _inputObj.validators = _inputObj.validators.slice(0);\r\n            _inputObj.validators.push(notEmptyValidator(null));\r\n        }\r\n        return _inputObj;\r\n    },\r\n\r\n    /**\r\n     * Returns an input validation result object with values of given object\r\n     * applied/assigned to it.\r\n     * @function module:fjlInputFilter.toInputValidationResult\r\n     * @param resultObj {Object|*}\r\n     * @returns {InputValidationResult}\r\n     */\r\n    toInputValidationResult = resultObj => {\r\n        const _result = defineEnumProps$([\r\n            [String, 'name', ''],\r\n            [Boolean, 'result', false],\r\n            [Array, 'messages', []]\r\n        ], {\r\n            value: null,\r\n            rawValue: null,\r\n            obscuredValue: null,\r\n            filteredValue: null\r\n        });\r\n        return assign(_result, resultObj);\r\n    }\r\n;\r\n\r\n/**\r\n * @memberOf fjlInputFilter\r\n * @class Input\r\n * @extends InputOptions\r\n */\r\nexport class Input {\r\n    constructor (inputObj) {\r\n        toInput(inputObj, this);\r\n    }\r\n    static of (inputObj) {\r\n        return new Input(inputObj);\r\n    }\r\n    validate (value) {\r\n        return validateInput(this, value);\r\n    }\r\n    validateIO (value) {\r\n        return validateIOInput(this, value);\r\n    }\r\n}\r\n","import {partition, foldl, map, assign, keys} from 'fjl';\r\nimport {validateInput, validateIOInput, toInput} from './Input';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\nimport {defaultErrorHandler} from './Utils';\r\n\r\n/**\r\n * @interface InputFilter {Object.<String, (Input|InputOptions)>}\r\n * @desc Contains input objects to validate against (key-value pair object).\r\n */\r\n\r\n/**\r\n * @interface InputFilterResult\r\n * @memberOf fjlInputFilter\r\n * @property {Boolean} result - Result of validation.\r\n * @property {Object.<String,InputValidationResult>} validInputs - Valid input results object.\r\n * @property {Object.<String,InputValidationResult>} invalidInputs - Invalid input results object.\r\n * @property {Array.<String,InputValidationResult>} validResults - Valid input results associative array.\r\n * @property {Array.<String,InputValidationResult>} invalidResults - Invalid input results associative array.\r\n * @property {Object.<String,Array.<String>>} messages - Error messages (if any) mapped to input names.\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns an associative list from an object.\r\n     * @function module:fjlInputFilter.toArrayMap\r\n     * @param obj {Object}\r\n     * @returns {Array.<Array<String,Object>>} - Associative list.\r\n     */\r\n    toArrayMap = obj => keys(obj).map(key => [key, obj[key]]),\r\n\r\n    /**\r\n     * Returns an object from an associative list.\r\n     * @function module:fjlInputFilter.fromArrayMap\r\n     * @param arrayMap {Array.<Array<String,Object>>}\r\n     * @returns {Object.<String,Object>}\r\n     */\r\n    fromArrayMap = arrayMap => foldl((agg, [key, value]) => {\r\n            agg[key] = value;\r\n            return agg;\r\n        }, {}, arrayMap),\r\n\r\n    /**\r\n     * @function module:fjlInputFilter.validateInputFilter\r\n     * @param inputsObj {InputFilter}\r\n     * @param valuesObj {Object.<String,*>}\r\n     * @returns {InputFilterResult}\r\n     */\r\n    validateInputFilter = (inputsObj, valuesObj) => {\r\n        if (!inputsObj || !valuesObj) {\r\n            return toInputFilterResult({result: false});\r\n        }\r\n        const [validResults, invalidResults] =\r\n            partition(([_, result]) => result.result,\r\n                map(([key, inputObj]) =>\r\n                    [key, validateInput(inputObj, valuesObj[key])],\r\n                    toArrayMap(inputsObj)\r\n                )),\r\n            messages = foldl((agg, [key, result]) => {\r\n                agg[key] = result.messages;\r\n                return agg;\r\n            }, {}, invalidResults),\r\n            validInputs = fromArrayMap(validResults),\r\n            invalidInputs = fromArrayMap(invalidResults),\r\n            result = !invalidResults.length\r\n        ;\r\n        return toInputFilterResult({\r\n            result,\r\n            validInputs,\r\n            invalidInputs,\r\n            validResults,\r\n            invalidResults,\r\n            messages\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlInputFilter.validateIOInputFilter\r\n     * @param inputsObj {InputFilter}\r\n     * @param valuesObj {Object.<String, *>}\r\n     * @param errorHandler {Function}\r\n     * @returns {Promise.<InputFilterResult>}\r\n     */\r\n    validateIOInputFilter = (inputsObj, valuesObj, errorHandler = defaultErrorHandler) => {\r\n        if (!inputsObj || !valuesObj) {\r\n            return Promise.resolve(toInputFilterResult({result: false}));\r\n        }\r\n\r\n        return Promise.all(map(([key, inputObj]) =>\r\n            validateIOInputWithName(inputObj, key, valuesObj[key]),\r\n                toArrayMap(inputsObj)\r\n        )).then(assocList => {\r\n            const [validResults, invalidResults] =\r\n                    partition(([_, result]) => result.result, assocList),\r\n                messages = foldl((agg, [key, result]) => {\r\n                    agg[key] = result.messages;\r\n                    return agg;\r\n                }, {}, invalidResults),\r\n                validInputs = fromArrayMap(validResults),\r\n                invalidInputs = fromArrayMap(invalidResults),\r\n                result = !invalidResults.length\r\n            ;\r\n\r\n            return toInputFilterResult({\r\n                result,\r\n                validInputs,\r\n                invalidInputs,\r\n                validResults,\r\n                invalidResults,\r\n                messages\r\n            });\r\n        },\r\n            errorHandler);\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlInputFilter.validateIOInputWithName\r\n     * @param input {Input|InputOptions}\r\n     * @param name {String}\r\n     * @param value {*}\r\n     * @param errorHandler {Function}\r\n     * @returns {Promise.<Array.<String,InputValidationResult>>}\r\n     */\r\n    validateIOInputWithName = (input, name, value, errorHandler = defaultErrorHandler) =>\r\n        validateIOInput(input, value)\r\n            .then(result => Promise.resolve([name, result]), errorHandler),\r\n\r\n    /**\r\n     * @function module:fjlInputFilter.toInputFilter\r\n     * @param inObj {Object.<String, Object>}\r\n     * @param breakOnFailure {Boolean}\r\n     * @param outObj {Object|*}\r\n     * @returns {InputFilter}\r\n     */\r\n    toInputFilter = (inObj, breakOnFailure = false, outObj = {}) =>\r\n        Object.defineProperties(outObj,\r\n            foldl((agg, [key, inputOpsObj]) => {\r\n                const inputObj = toInput(assign(inputOpsObj, {name: key}));\r\n                inputObj.breakOnFailure = breakOnFailure;\r\n                agg[key] = {\r\n                    value: inputObj,\r\n                    enumerable: true\r\n                };\r\n                return agg;\r\n            }, {}, map(key =>\r\n                [key, inObj[key]],\r\n                keys(inObj)\r\n            ))\r\n        ),\r\n\r\n    /**\r\n     * @function module:fjlInputFilter.toInputFilterResult\r\n     * @param inResult {Object}\r\n     * @param outResult {Object|*}\r\n     * @returns {InputFilterResult}\r\n     */\r\n    toInputFilterResult = (inResult, outResult = {}) => {\r\n        const _outResult = defineEnumProps$([\r\n            [Boolean, 'result', false],\r\n            [Object,  'messages', {}],\r\n            [Object,  'validInputs', {}],\r\n            [Object,  'invalidInputs', {}],\r\n            [Array,   'validResults', []],\r\n            [Array,   'invalidResults', []]\r\n        ], outResult);\r\n        return inResult ? assign(_outResult, inResult) : _outResult;\r\n    }\r\n\r\n;\r\n\r\n/**\r\n * @class InputFilter\r\n */\r\nexport class InputFilter {\r\n    constructor (inputsObj, breakOnFailure = false) {\r\n        toInputFilter(inputsObj, breakOnFailure, this);\r\n    }\r\n    static of (inputsObj, breakOnFailure) {\r\n        return new InputFilter(inputsObj, breakOnFailure);\r\n    }\r\n    validate (data) {\r\n        return validateInputFilter(this, data);\r\n    }\r\n    validateIO (data) {\r\n        return validateIOInputFilter(this, data);\r\n    }\r\n}\r\n\r\nexport default {\r\n    InputFilter,\r\n    toInputFilter,\r\n    toInputFilterResult,\r\n    validateInputFilter,\r\n    validateIOInputFilter,\r\n    validateIOInputWithName,\r\n    toArrayMap,\r\n    fromArrayMap\r\n};\r\n","/**\r\n * @module fjlInputFilter\r\n */\r\nexport * from './Input';\r\nexport * from './InputFilter';\r\n"],"names":["defaultErrorHandler","console","error","bind","noValidationRequired","input","value","required","isset","isString","isArray","length","validateInput","validators","filters","breakOnFailure","valueObscured","valueObscurator","name","toInputValidationResult","vResult","runValidators","fResult","runFilters","oResult","assign","validateIOInput","Promise","resolve","pendingValidation","runIOValidators","result","then","runIOFilters","rawValue","filteredValue","obscuredValue","i","messageResults","toValidationResult","limit","push","messages","concat","errorCallback","pendingResults","validator","catch","all","failedResults","results","filter","rslt","interimResult","reduce","agg","item","apply","compose","map","x","toInput","inputObj","out","_inputObj","defineEnumProps$","String","Boolean","Array","toValidationOptions","slice","notEmptyValidator","_result","resultObj","Input","toArrayMap","keys","obj","key","fromArrayMap","foldl","arrayMap","validateInputFilter","inputsObj","valuesObj","toInputFilterResult","partition","_","validResults","invalidResults","validInputs","invalidInputs","validateIOInputFilter","errorHandler","validateIOInputWithName","assocList","toInputFilter","inObj","outObj","Object","defineProperties","inputOpsObj","inResult","outResult","_outResult","InputFilter","data"],"mappings":"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"}